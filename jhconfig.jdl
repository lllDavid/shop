application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName shop
    buildTool maven
    cacheProvider ehcache
    clientFramework angular
    clientPackageManager npm
    clientTheme none
    creationTimestamp 1577000812973
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    embeddableLaunchScript false
    enableGradleEnterprise false
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jwtSecretKey "bXktc2VjcmV0LWtleS13aGljaC1zaG91bGQtYmUtY2hhbmdlZC1pbi1wcm9kdWN0aW9uLWFuZC1iZS1iYXNlNjQtZW5jb2RlZAo="
    languages [en]
    messageBroker false
    nativeLanguage en
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType false
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks [gatling, cypress]
    websocket false
    withAdminUi true
  }
  entities Product,Category,Customer,Order,Cart,PaymentMethod,ShippingInformation
}

entity Product {
  name String,
  description String,
  price BigDecimal,
  inStock Integer
  image ImageBlob
}



entity Category {
  name String,
  description String
}



relationship ManyToOne {
  Product{category} to Category{products}
}

entity Customer {
  lastName String,
  firstName String,
  address String,
  email String,
  password String
}



relationship OneToMany {
  Customer{orders} to Order{customer}
}

entity Order {
  date ZonedDateTime,
  totalPrice BigDecimal
}



entity Cart {
  totalPrice BigDecimal
  productAmount BigDecimal
}



relationship ManyToOne {
  Cart{customer} to Customer{carts},
  Cart{product} to Product
}

entity PaymentMethod {
  name String,
  description String
}



entity ShippingInformation {
  deliveryAddress String,
  shippingStatus String
}



relationship ManyToOne {
  ShippingInformation{customer} to Customer{shippingInformation}
}

relationship ManyToOne {
  Order{paymentMethod} to PaymentMethod{orders}
}

relationship OneToOne {
  Order{shippingInformation} to ShippingInformation{order}
}

relationship ManyToMany {
  Order{products} to Product{orders},
  Customer{favoriteProducts} to Product{favoritedByCustomers}
}

filter *